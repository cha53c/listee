<script>

    let itemNum = 0
    const item = document.getElementById("item-input");
    const listname = document.getElementById('listname');
    const validationMsg = {
        empty: 'empty',
        tooLong: 'too long, max length x',
        valid: 'valid'
    }

    function removeListRow(itemNode) {
        let rowNode = itemNode.parentNode;
        let listNode = rowNode.parentNode
        listNode.removeChild(rowNode);// removes whole list-row
    }

    function removeDeletedRows() {
        let elements = document.getElementsByClassName('deleted');
        for (const itemNode of elements) {
            console.log('itemNode: ' + itemNode.id);
            let rowNode = itemNode.parentNode;
            console.log('rowNode: ' + rowNode.className);
            let listNode = rowNode.parentNode
            console.log('listNode: ' + listNode.id);
            listNode.removeChild(rowNode);// removes whole list-row
        }
    }

    function validateAddedItem(value) {
        let msg = validationMsg.valid;
        if (value === '') {
            console.log(validationMsg.empty);
            msg = validationMsg.empty
        }
        if (msg === validationMsg.valid) {
            return;
        }
        alert('input is ' + msg);
        return;
    }

    function appendListItem(item, id) {
        let rowDiv = document.createElement('DIV')
        rowDiv.setAttribute('class', 'list-row');
        let itemDiv = document.createElement('DIV');
        itemDiv.setAttribute('id', id);
        itemDiv.setAttribute('class', 'list-item');
        let textNode = document.createTextNode(item)
        itemDiv.appendChild(textNode);
        document.getElementById('list-items').appendChild(rowDiv);
        rowDiv.appendChild(itemDiv);
        return itemDiv;
    }

    function appendRemoveButton(itemNode, action) {
        const parent = itemNode.parentNode;
        console.log('appending remove button');
        let button = document.createElement('BUTTON');
        button.setAttribute('class', 'remove-btn');
        button.setAttribute('type', 'button');
        button.setAttribute('data-itemId', itemNode.id);
        let textNode = document.createTextNode('remove')
        button.appendChild(textNode);
        parent.appendChild(button);
        button.addEventListener('click', action);
    }

    function appendUndoButton(itemNode, action) {
        console.log('appending undo button');
        let parent = itemNode.parentNode;
        let undoButton = document.createElement('BUTTON');
        undoButton.setAttribute('id', 'undo' + itemNode.id);  //TODO can you chain these?
        undoButton.setAttribute('class', 'undo-btn hide');
        undoButton.setAttribute('type', 'button');
        undoButton.setAttribute('data-itemId', itemNode.id);
        // undoButton.setAttribute('class', 'remove-btn hide');
        let textNode = document.createTextNode('undo')
        undoButton.appendChild(textNode);
        parent.appendChild(undoButton);
        // TODO how to get this to work for add and show???
        undoButton.addEventListener('click', action);
    }

    //remove from DOM
    function removeItem(itemId) {
        let element = document.getElementById(itemId);
        removeListRow(element);
    }

    // Execute a function when the user releases a key on the keyboard
    if (item) {
        item.addEventListener("keyup", function (event) {
            // Number 13 is the "Enter" key on the keyboard
            if (event.keyCode === 13) {
                // Cancel the default action, if needed
                event.preventDefault();
                // Trigger the button element with a click
                console.log('you hit enter');
                document.getElementById('add').click();
            }
        });
    }
    if (listname) {
        listname.addEventListener("keyup", function (event) {
            // Number 13 is the "Enter" key on the keyboard
            if (event.keyCode === 13) {
                // Cancel the default action, if needed
                event.preventDefault();
                // Trigger the button element with a click
                console.log('you hit enter');
                document.getElementById('submit').click();
            }
        });
    }

    function setAddItemfocus() {
        document.getElementById("item-input").focus();
    }

    function toggle_edit_save() {
        let htmlCollection = document.getElementsByClassName('update-page');
        let elements = Array.from(htmlCollection);
        htmlCollection = document.getElementsByClassName('remove-btn');
        elements = elements.concat(Array.from(htmlCollection));
        for (const el of elements) {
            el.classList.toggle('hide');
        }
    }

    const deleteAction = function (event) {
        console.log('you clicked delete item');
        console.log(event);
        let itemId = event.target.getAttribute('data-itemId');
        let element = document.getElementById(itemId);
        element.classList.toggle('deleted');
        let undoButton = document.getElementById('undo' + itemId);
        undoButton.classList.toggle('hide');
        event.target.classList.toggle('hide');
    }

    const undoAction = function (event) {
        console.log('you clicked undo');
        console.log(event);
        let itemId = event.target.getAttribute('data-itemId');
        let element = document.getElementById(itemId);
        element.classList.toggle('deleted');
        let delButton = document.getElementById('del' + itemId);
        delButton.classList.toggle('hide');
        event.target.classList.toggle('hide');
    }

    function getDeletedItems() {
        let items = [];
        let elements = document.getElementsByClassName('list-item');
        console.log(elements);
        for (const el of elements) {
            console.log(el.innerText);
            if (el.classList.contains('deleted')) {
                items.push(el.innerText);
            }
        }
        return items;
    }

    function getRemainingItems() {
        let items = [];
        let elements = document.getElementsByClassName('list-item');
        console.log(elements);
        for (const el of elements) {
            console.log(el.innerText);
            if (!el.classList.contains('deleted')) {
                items.push(el.innerText);
            }
        }
        return items;
    }

    function saveOnloadAction(xhr) {
        return function () {
            console.log('this is the closure version');
            console.log('ready state: ' + xhr.readyState)
            console.log('xhr status ' + xhr.status);

            if (xhr.status === 200) {
                console.log('save was successful');
                removeDeletedRows();
                toggle_edit_save();
                toggle_add_item();
            } else {
                alert('Error! changes not saved');
            }
        }
    }

    function toggle_add_item() {
        const input = document.getElementById('item-input');
        const add = document.getElementById('add');
        if (input && add) {
            input.classList.toggle('hide');
            add.classList.toggle('hide');
        }
    }
</script>